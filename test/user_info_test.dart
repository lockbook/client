import 'package:client/encryption_helper.dart';
import 'package:client/user_info.dart';
import 'package:flutter_test/flutter_test.dart';

const EncryptionHelper encryptionHelper = EncryptionHelper();

void main() {
  final username = "parth";
  final keyPair = encryptionHelper.generateKeyPair();
  final userInfo = UserInfo(username, RSAKeyPair.fromAsymmetricKey(keyPair));

  test('constructor validation', () async {
    expect(username, userInfo.username, reason: "usernames should match");
    expect(keyPair.privateKey.p, userInfo.keyPair.p,
        reason: "p's should match");
    expect(keyPair.privateKey.q, userInfo.keyPair.q,
        reason: "q's should match");
    expect(keyPair.publicKey.modulus, userInfo.keyPair.modulus,
        reason: "modulus should match");
    expect(keyPair.publicKey.exponent, userInfo.keyPair.publicExponent,
        reason: "public exponents should match");
    expect(keyPair.privateKey.exponent, userInfo.keyPair.privateExponent,
        reason: "private exponents should match");
  });

  test('rsa getters', () async {
    expect(keyPair.privateKey, userInfo.keyPair.getPrivateKey());
    expect(keyPair.publicKey, userInfo.keyPair.getPublicKey());
  });

  test('test encoding/decoding', () async {
    final encoded = userInfo.encode();
    final decodingTask = UserInfo.decode(encoded);
    final decodedUserInfo = decodingTask.getValueUnsafely();

    expect(decodingTask.isSuccessful(), true);
    expect(decodedUserInfo.username, userInfo.username);
    expect(decodedUserInfo.keyPair.getPublicKey(), keyPair.publicKey);
    expect(decodedUserInfo.keyPair.getPrivateKey(), keyPair.privateKey);
  });

  test('test decoding', () async {
    final decodingTask1 = UserInfo.decode(
        '{"username":"parth","keyPair":{"modulus":"27687471495008291201939555273637376914325797344671038546211418735947513531616603334320878125153700340508960848037225054113221889290804231223443382013105305921738678852202532447314084996013723773177245408935009169175552090524758050854439413228518897143172649918391833771281909863332542770952755673142786818367257767307087831168506865629977754952325284682007326832159575923351005866147699359576934733979019001555593881682899747421235865840947064411445205854245417603889277945702669434453969280636557457816544093413658551112992900605083029410684913485259808860685866568700521422163391129500849651472674256661478938928187","publicExponent":"65537","privateExponent":"25373176228980621043033519236147324718822849119178447351067512975300543436461259741153510525635993236654526139009532012832232074231600642736908709283688474729598597939857361433285573504670464563426036925938442646009345606372376577754043925097145375032757162846158584379349378587391689980936746463421924005131438896339334895774881657741918951024952988737668807946191287620475612158719131788382146817424091016984764204931084630813055861399450104994410576333528175020145779306523785800208590395986354564057761555795708045493235248313084248124814345004940590775533746106979756498489897749615808077971495661222900959034025","p":"176715993857060579943439183400021642319134211336142380585940894941533372940134190936404699461559588013373586753406856134801409882335817312079650914972568446730131285257181533752453080228445325103378869731772855240331454167814588009638953812144415819337284560585636846136085145483649862623432209884013367517893","q":"156677790678096311628758812548823515931257067507617519564470427215476688316112763252482348516649327125022344604504239300966133333596486097372748845757539107120119397060327475315306160584643226060481711099536369751844275510436453366680456940988792570875295429698122697848641190787688574776115435452514104482559"}}');
    expect(decodingTask1.isSuccessful(), true);

    final decodingTask2 = UserInfo.decode(
        '{"username":"parth","keyPair":{"modu_WHOOPS_lus":"27687471495008291201939555273637376914325797344671038546211418735947513531616603334320878125153700340508960848037225054113221889290804231223443382013105305921738678852202532447314084996013723773177245408935009169175552090524758050854439413228518897143172649918391833771281909863332542770952755673142786818367257767307087831168506865629977754952325284682007326832159575923351005866147699359576934733979019001555593881682899747421235865840947064411445205854245417603889277945702669434453969280636557457816544093413658551112992900605083029410684913485259808860685866568700521422163391129500849651472674256661478938928187","publicExponent":"65537","privateExponent":"25373176228980621043033519236147324718822849119178447351067512975300543436461259741153510525635993236654526139009532012832232074231600642736908709283688474729598597939857361433285573504670464563426036925938442646009345606372376577754043925097145375032757162846158584379349378587391689980936746463421924005131438896339334895774881657741918951024952988737668807946191287620475612158719131788382146817424091016984764204931084630813055861399450104994410576333528175020145779306523785800208590395986354564057761555795708045493235248313084248124814345004940590775533746106979756498489897749615808077971495661222900959034025","p":"176715993857060579943439183400021642319134211336142380585940894941533372940134190936404699461559588013373586753406856134801409882335817312079650914972568446730131285257181533752453080228445325103378869731772855240331454167814588009638953812144415819337284560585636846136085145483649862623432209884013367517893","q":"156677790678096311628758812548823515931257067507617519564470427215476688316112763252482348516649327125022344604504239300966133333596486097372748845757539107120119397060327475315306160584643226060481711099536369751844275510436453366680456940988792570875295429698122697848641190787688574776115435452514104482559"}}');
    expect(decodingTask2.isSuccessful(), false);
  });
}
